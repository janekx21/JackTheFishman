Index: src/main/kotlin/jackTheFishman/engine/Audio.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Audio.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Audio.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,9 +1,11 @@
 package engine
 
-import engine.math.Vector3fCopy
+import engine.math.Vector3fConst
 import engine.util.IFinalized
 import org.joml.Quaternionf
+import org.joml.Quaternionfc
 import org.joml.Vector3f
+import org.joml.Vector3fc
 import org.lwjgl.openal.AL
 import org.lwjgl.openal.AL10.*
 import org.lwjgl.openal.ALC
@@ -25,14 +27,24 @@
     private val context = alcCreateContext(device, attributes)
 
     init {
+        setupContext()
+        setupCapabilities()
+        setupListener()
+    }
+
+    private fun setupContext() {
         alcMakeContextCurrent(context).also {
             check(it) { "failed to make context current" }
         }
         alcMakeContextCurrent(context)
+    }
 
+    private fun setupCapabilities() {
         val cap = ALC.createCapabilities(device)
         AL.createCapabilities(cap)
+    }
 
+    private fun setupListener() {
         alListener3f(AL_POSITION, 0f, 0f, 1f)
         alListener3f(AL_VELOCITY, 0f, 0f, 0f)
         alListenerfv(AL_ORIENTATION, floatArrayOf(0f, 0f, 1f, 0f, 1f, 0f))
@@ -45,26 +57,24 @@
     }
 
     object Listener {
-        var position: Vector3f = Vector3fCopy.zero
+        var position: Vector3fc = Vector3fConst.zero
             set(value) {
-                alListener3f(AL_POSITION, value.x, value.y, value.z)
+                alListener3f(AL_POSITION, value.x(), value.y(), value.z())
                 field = value
             }
 
-        var velocity: Vector3f = Vector3fCopy.zero
+        var velocity: Vector3fc = Vector3fConst.zero
             set(value) {
-                alListener3f(AL_VELOCITY, value.x, value.y, value.z)
+                alListener3f(AL_VELOCITY, value.x(), value.y(), value.z())
                 field = value
             }
 
-        // TODO this is buggy
-        var rotation: Quaternionf = Quaternionf()
+        var rotation: Quaternionfc = Quaternionf()
             set(value) {
-                val direction = Vector3fCopy.forward // default direction
-                rotation.transformInverse(direction)
-                alListenerfv(AL_ORIENTATION, floatArrayOf(direction.x, direction.y, direction.z, 0f, 1f, 0f))
+                val direction = Vector3f(Vector3fConst.forward) // default direction
+                Quaternionf(rotation).transform(direction)
+                alListenerfv(AL_ORIENTATION, floatArrayOf(direction.x(), direction.y(), direction.z(), 0f, 1f, 0f))
                 field = value
             }
-
     }
 }
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/Game.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Game.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Game.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -3,19 +3,39 @@
 import engine.util.IFinalized
 import org.lwjgl.glfw.GLFW
 
+/**
+ * Base class for all games. This is the main entry point.
+ */
 open class Game {
     init {
+        configGLFW()
+        initEngineObjects()
+    }
+
+    private fun configGLFW() {
         check(GLFW.glfwInit()) { "GLFW could'nt init" }
-        // Configure GLFW
         GLFW.glfwDefaultWindowHints() // optional, the current window hints are already the default
-        Window // init window
+    }
+
+    private fun initEngineObjects() {
+        Window
         Audio
         Physics
     }
 
+    /**
+     * Updates the game
+     */
     open fun update() {}
+
+    /**
+     * Draws the game
+     */
     open fun draw() {}
 
+    /**
+     * Runs the game. Blocks execution while the game runs.
+     */
     fun run() {
         try {
             while (!Window.shouldClose) {
Index: src/main/kotlin/jackTheFishman/engine/Input.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Input.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Input.kt	(revision 35f408d94e46c0931df37f9c8492041a430455cf)
@@ -1,14 +1,25 @@
 package engine
 
 import Vector2fCopy
+import engine.Input.Keyboard.changed
+import engine.Input.Keyboard.down
+import engine.Input.Keyboard.justDown
+import engine.Input.Keyboard.justUp
+import engine.Input.Keyboard.up
+import engine.math.minus
 import engine.util.DoublePointer
 import org.joml.Vector2f
+import org.joml.Vector2fc
 import org.lwjgl.glfw.GLFW.*
-import org.lwjgl.glfw.GLFWGamepadState
 
+/**
+ * Interface for all user interactions delegated to sub objects
+ */
 object Input {
-
-    data class ButtonState(val isDown: Boolean, val changed: Boolean) {
+    /**
+     * Immutable button state
+     */
+    data class ToggleableState(val isDown: Boolean, val changed: Boolean) {
         val justDown = isDown && changed
         val justUp = !isDown && changed
     }
@@ -16,60 +27,329 @@
     fun update() {
         Keyboard.update()
         Mouse.update()
-        Controller.update()
     }
 
+    /**
+     * Interface for keyboard interactions like pressing and releasing keys.
+     * You can get a specific key state using these functions respectively:
+     * [down], [up], [changed], [justDown] and [justUp].
+     */
     object Keyboard {
-        private var keyStates = (0..GLFW_KEY_LAST).map {
-            Pair(it, ButtonState(isDown = false, changed = false))
-        }.toMap()
+        enum class Keys {
+            KEY_SPACE,
+            KEY_APOSTROPHE,
+            KEY_COMMA,
+            KEY_MINUS,
+            KEY_PERIOD,
+            KEY_SLASH,
+            KEY_0,
+            KEY_1,
+            KEY_2,
+            KEY_3,
+            KEY_4,
+            KEY_5,
+            KEY_6,
+            KEY_7,
+            KEY_8,
+            KEY_9,
+            KEY_SEMICOLON,
+            KEY_EQUAL,
+            KEY_A,
+            KEY_B,
+            KEY_C,
+            KEY_D,
+            KEY_E,
+            KEY_F,
+            KEY_G,
+            KEY_H,
+            KEY_I,
+            KEY_J,
+            KEY_K,
+            KEY_L,
+            KEY_M,
+            KEY_N,
+            KEY_O,
+            KEY_P,
+            KEY_Q,
+            KEY_R,
+            KEY_S,
+            KEY_T,
+            KEY_U,
+            KEY_V,
+            KEY_W,
+            KEY_X,
+            KEY_Y,
+            KEY_Z,
+            KEY_LEFT_BRACKET,
+            KEY_BACKSLASH,
+            KEY_RIGHT_BRACKET,
+            KEY_GRAVE_ACCENT,
+            KEY_WORLD_1,
+            KEY_WORLD_2,
+            KEY_ESCAPE,
+            KEY_ENTER,
+            KEY_TAB,
+            KEY_BACKSPACE,
+            KEY_INSERT,
+            KEY_DELETE,
+            KEY_RIGHT,
+            KEY_LEFT,
+            KEY_DOWN,
+            KEY_UP,
+            KEY_PAGE_UP,
+            KEY_PAGE_DOWN,
+            KEY_HOME,
+            KEY_END,
+            KEY_CAPS_LOCK,
+            KEY_SCROLL_LOCK,
+            KEY_NUM_LOCK,
+            KEY_PRINT_SCREEN,
+            KEY_PAUSE,
+            KEY_F1,
+            KEY_F2,
+            KEY_F3,
+            KEY_F4,
+            KEY_F5,
+            KEY_F6,
+            KEY_F7,
+            KEY_F8,
+            KEY_F9,
+            KEY_F10,
+            KEY_F11,
+            KEY_F12,
+            KEY_F13,
+            KEY_F14,
+            KEY_F15,
+            KEY_F16,
+            KEY_F17,
+            KEY_F18,
+            KEY_F19,
+            KEY_F20,
+            KEY_F21,
+            KEY_F22,
+            KEY_F23,
+            KEY_F24,
+            KEY_F25,
+            KEY_KP_0,
+            KEY_KP_1,
+            KEY_KP_2,
+            KEY_KP_3,
+            KEY_KP_4,
+            KEY_KP_5,
+            KEY_KP_6,
+            KEY_KP_7,
+            KEY_KP_8,
+            KEY_KP_9,
+            KEY_KP_DECIMAL,
+            KEY_KP_DIVIDE,
+            KEY_KP_MULTIPLY,
+            KEY_KP_SUBTRACT,
+            KEY_KP_ADD,
+            KEY_KP_ENTER,
+            KEY_KP_EQUAL,
+            KEY_LEFT_SHIFT,
+            KEY_LEFT_CONTROL,
+            KEY_LEFT_ALT,
+            KEY_LEFT_SUPER,
+            KEY_RIGHT_SHIFT,
+            KEY_RIGHT_CONTROL,
+            KEY_RIGHT_ALT,
+            KEY_RIGHT_SUPER,
+            KEY_MENU
+        }
+
+        private val glfwKeyToKey = mapOf(
+            GLFW_KEY_SPACE to Keys.KEY_SPACE,
+            GLFW_KEY_APOSTROPHE to Keys.KEY_APOSTROPHE,
+            GLFW_KEY_COMMA to Keys.KEY_COMMA,
+            GLFW_KEY_MINUS to Keys.KEY_MINUS,
+            GLFW_KEY_PERIOD to Keys.KEY_PERIOD,
+            GLFW_KEY_SLASH to Keys.KEY_SLASH,
+            GLFW_KEY_0 to Keys.KEY_0,
+            GLFW_KEY_1 to Keys.KEY_1,
+            GLFW_KEY_2 to Keys.KEY_2,
+            GLFW_KEY_3 to Keys.KEY_3,
+            GLFW_KEY_4 to Keys.KEY_4,
+            GLFW_KEY_5 to Keys.KEY_5,
+            GLFW_KEY_6 to Keys.KEY_6,
+            GLFW_KEY_7 to Keys.KEY_7,
+            GLFW_KEY_8 to Keys.KEY_8,
+            GLFW_KEY_9 to Keys.KEY_9,
+            GLFW_KEY_SEMICOLON to Keys.KEY_SEMICOLON,
+            GLFW_KEY_EQUAL to Keys.KEY_EQUAL,
+            GLFW_KEY_A to Keys.KEY_A,
+            GLFW_KEY_B to Keys.KEY_B,
+            GLFW_KEY_C to Keys.KEY_C,
+            GLFW_KEY_D to Keys.KEY_D,
+            GLFW_KEY_E to Keys.KEY_E,
+            GLFW_KEY_F to Keys.KEY_F,
+            GLFW_KEY_G to Keys.KEY_G,
+            GLFW_KEY_H to Keys.KEY_H,
+            GLFW_KEY_I to Keys.KEY_I,
+            GLFW_KEY_J to Keys.KEY_J,
+            GLFW_KEY_K to Keys.KEY_K,
+            GLFW_KEY_L to Keys.KEY_L,
+            GLFW_KEY_M to Keys.KEY_M,
+            GLFW_KEY_N to Keys.KEY_N,
+            GLFW_KEY_O to Keys.KEY_O,
+            GLFW_KEY_P to Keys.KEY_P,
+            GLFW_KEY_Q to Keys.KEY_Q,
+            GLFW_KEY_R to Keys.KEY_R,
+            GLFW_KEY_S to Keys.KEY_S,
+            GLFW_KEY_T to Keys.KEY_T,
+            GLFW_KEY_U to Keys.KEY_U,
+            GLFW_KEY_V to Keys.KEY_V,
+            GLFW_KEY_W to Keys.KEY_W,
+            GLFW_KEY_X to Keys.KEY_X,
+            GLFW_KEY_Y to Keys.KEY_Y,
+            GLFW_KEY_Z to Keys.KEY_Z,
+            GLFW_KEY_LEFT_BRACKET to Keys.KEY_LEFT_BRACKET,
+            GLFW_KEY_BACKSLASH to Keys.KEY_BACKSLASH,
+            GLFW_KEY_RIGHT_BRACKET to Keys.KEY_RIGHT_BRACKET,
+            GLFW_KEY_GRAVE_ACCENT to Keys.KEY_GRAVE_ACCENT,
+            GLFW_KEY_WORLD_1 to Keys.KEY_WORLD_1,
+            GLFW_KEY_WORLD_2 to Keys.KEY_WORLD_2,
+            GLFW_KEY_ESCAPE to Keys.KEY_ESCAPE,
+            GLFW_KEY_ENTER to Keys.KEY_ENTER,
+            GLFW_KEY_TAB to Keys.KEY_TAB,
+            GLFW_KEY_BACKSPACE to Keys.KEY_BACKSPACE,
+            GLFW_KEY_INSERT to Keys.KEY_INSERT,
+            GLFW_KEY_DELETE to Keys.KEY_DELETE,
+            GLFW_KEY_RIGHT to Keys.KEY_RIGHT,
+            GLFW_KEY_LEFT to Keys.KEY_LEFT,
+            GLFW_KEY_DOWN to Keys.KEY_DOWN,
+            GLFW_KEY_UP to Keys.KEY_UP,
+            GLFW_KEY_PAGE_UP to Keys.KEY_PAGE_UP,
+            GLFW_KEY_PAGE_DOWN to Keys.KEY_PAGE_DOWN,
+            GLFW_KEY_HOME to Keys.KEY_HOME,
+            GLFW_KEY_END to Keys.KEY_END,
+            GLFW_KEY_CAPS_LOCK to Keys.KEY_CAPS_LOCK,
+            GLFW_KEY_SCROLL_LOCK to Keys.KEY_SCROLL_LOCK,
+            GLFW_KEY_NUM_LOCK to Keys.KEY_NUM_LOCK,
+            GLFW_KEY_PRINT_SCREEN to Keys.KEY_PRINT_SCREEN,
+            GLFW_KEY_PAUSE to Keys.KEY_PAUSE,
+            GLFW_KEY_F1 to Keys.KEY_F1,
+            GLFW_KEY_F2 to Keys.KEY_F2,
+            GLFW_KEY_F3 to Keys.KEY_F3,
+            GLFW_KEY_F4 to Keys.KEY_F4,
+            GLFW_KEY_F5 to Keys.KEY_F5,
+            GLFW_KEY_F6 to Keys.KEY_F6,
+            GLFW_KEY_F7 to Keys.KEY_F7,
+            GLFW_KEY_F8 to Keys.KEY_F8,
+            GLFW_KEY_F9 to Keys.KEY_F9,
+            GLFW_KEY_F10 to Keys.KEY_F10,
+            GLFW_KEY_F11 to Keys.KEY_F11,
+            GLFW_KEY_F12 to Keys.KEY_F12,
+            GLFW_KEY_F13 to Keys.KEY_F13,
+            GLFW_KEY_F14 to Keys.KEY_F14,
+            GLFW_KEY_F15 to Keys.KEY_F15,
+            GLFW_KEY_F16 to Keys.KEY_F16,
+            GLFW_KEY_F17 to Keys.KEY_F17,
+            GLFW_KEY_F18 to Keys.KEY_F18,
+            GLFW_KEY_F19 to Keys.KEY_F19,
+            GLFW_KEY_F20 to Keys.KEY_F20,
+            GLFW_KEY_F21 to Keys.KEY_F21,
+            GLFW_KEY_F22 to Keys.KEY_F22,
+            GLFW_KEY_F23 to Keys.KEY_F23,
+            GLFW_KEY_F24 to Keys.KEY_F24,
+            GLFW_KEY_F25 to Keys.KEY_F25,
+            GLFW_KEY_KP_0 to Keys.KEY_KP_0,
+            GLFW_KEY_KP_1 to Keys.KEY_KP_1,
+            GLFW_KEY_KP_2 to Keys.KEY_KP_2,
+            GLFW_KEY_KP_3 to Keys.KEY_KP_3,
+            GLFW_KEY_KP_4 to Keys.KEY_KP_4,
+            GLFW_KEY_KP_5 to Keys.KEY_KP_5,
+            GLFW_KEY_KP_6 to Keys.KEY_KP_6,
+            GLFW_KEY_KP_7 to Keys.KEY_KP_7,
+            GLFW_KEY_KP_8 to Keys.KEY_KP_8,
+            GLFW_KEY_KP_9 to Keys.KEY_KP_9,
+            GLFW_KEY_KP_DECIMAL to Keys.KEY_KP_DECIMAL,
+            GLFW_KEY_KP_DIVIDE to Keys.KEY_KP_DIVIDE,
+            GLFW_KEY_KP_MULTIPLY to Keys.KEY_KP_MULTIPLY,
+            GLFW_KEY_KP_SUBTRACT to Keys.KEY_KP_SUBTRACT,
+            GLFW_KEY_KP_ADD to Keys.KEY_KP_ADD,
+            GLFW_KEY_KP_ENTER to Keys.KEY_KP_ENTER,
+            GLFW_KEY_KP_EQUAL to Keys.KEY_KP_EQUAL,
+            GLFW_KEY_LEFT_SHIFT to Keys.KEY_LEFT_SHIFT,
+            GLFW_KEY_LEFT_CONTROL to Keys.KEY_LEFT_CONTROL,
+            GLFW_KEY_LEFT_ALT to Keys.KEY_LEFT_ALT,
+            GLFW_KEY_LEFT_SUPER to Keys.KEY_LEFT_SUPER,
+            GLFW_KEY_RIGHT_SHIFT to Keys.KEY_RIGHT_SHIFT,
+            GLFW_KEY_RIGHT_CONTROL to Keys.KEY_RIGHT_CONTROL,
+            GLFW_KEY_RIGHT_ALT to Keys.KEY_RIGHT_ALT,
+            GLFW_KEY_RIGHT_SUPER to Keys.KEY_RIGHT_SUPER,
+            GLFW_KEY_MENU to Keys.KEY_MENU
+        )
 
-        // Die gesammelten key-states, beim nächsten update angewendet werden.
+        private var keyStates =
+            Keys.values().map { key -> Pair(key, ToggleableState(isDown = false, changed = false)) }.toMap()
+
+        /**
+         * Collection of all key states that should be applied in the next update
+         */
         private var nextKeyStates = keyStates.toMutableMap()
 
-        // Super inkonsistent mit Mouse und Controller. Egal!
-        fun down(key: Int): Boolean = keyStates.getValue(key).isDown
+        @Deprecated("it depends on glfw key codes", ReplaceWith("down(key: Keys)"))
+        fun down(key: Int): Boolean = down(glfwKeyToKey[key] ?: error("Key not found"))
+        fun down(key: Keys): Boolean = keyStates.getValue(key).isDown
 
-        fun up(key: Int): Boolean = !down(key)
+        @Deprecated("it depends on glfw key codes", ReplaceWith("up(key: Keys)"))
+        fun up(key: Int): Boolean = up(glfwKeyToKey[key] ?: error("Key not found"))
+        fun up(key: Keys): Boolean = !down(key)
 
-        fun changed(key: Int): Boolean = keyStates.getValue(key).changed
+        @Deprecated("it depends on glfw key codes", ReplaceWith("changed(key: Keys)"))
+        fun changed(key: Int): Boolean = changed(glfwKeyToKey[key] ?: error("Key not found"))
+        fun changed(key: Keys): Boolean = keyStates.getValue(key).changed
 
-        fun justDown(key: Int): Boolean = keyStates.getValue(key).justDown
+        @Deprecated("it depends on glfw key codes", ReplaceWith("justDown(key: Keys)"))
+        fun justDown(key: Int): Boolean = justDown(glfwKeyToKey[key] ?: error("Key not found"))
+        fun justDown(key: Keys): Boolean = keyStates.getValue(key).justDown
 
-        fun justUp(key: Int): Boolean = keyStates.getValue(key).justUp
+        @Deprecated("it depends on glfw key codes", ReplaceWith("justUp(key: Keys)"))
+        fun justUp(key: Int): Boolean = justUp(glfwKeyToKey[key] ?: error("Key not found"))
+        fun justUp(key: Keys): Boolean = keyStates.getValue(key).justUp
 
-        // Wird von GLFW aufgerufen wenn sich der State von einem key geändert hat.
+        /**
+         * Updates a key state. This does not change the key state immediately.
+         * Therefore it does not change the return values of [down], [up], [changed], [justDown] and [justUp].
+         */
         fun onKeyChanged(
-            key: Int,
-            action: Int
+            glfwKey: Int,
+            glfwAction: Int
         ) {
-            when (action) {
+            val key = glfwKeyToKey[glfwKey]
+            check(key != null) { "Key not found" }
+            val isDown = keyStates[key]?.isDown
+            check(isDown != null) { "Key states is missing a key" }
+            when (glfwAction) {
                 GLFW_PRESS -> {
-                    nextKeyStates[key] = ButtonState(
+                    nextKeyStates[key] = ToggleableState(
                         isDown = true,
-                        changed = !keyStates.getValue(key).isDown
+                        changed = !isDown
                     )
                 }
                 GLFW_RELEASE -> {
-                    nextKeyStates[key] = ButtonState(
+                    nextKeyStates[key] = ToggleableState(
                         isDown = false,
-                        changed = keyStates.getValue(key).isDown
+                        changed = isDown
                     )
                 }
                 else -> {
-                    check(action == GLFW_REPEAT)
+                    check(glfwAction == GLFW_REPEAT)
                 }
             }
         }
 
-        // onKeyChanged verändert nichts an den Rückgabewerten von changed, justDown, justUp etc.
-        // Erst wenn nach onKeyChanged die update-Funktion aufgerufen wird, werden die Änderungen wirksam gemacht.
+        /**
+         * Flushes the new key states.
+         * Only when the update function is called the changes are made effective.
+         */
         fun update() {
             keyStates = nextKeyStates.toMap()
 
             nextKeyStates = keyStates.mapValues {
                 if (it.value.changed) {
-                    ButtonState(isDown = it.value.isDown, changed = false)
+                    ToggleableState(isDown = it.value.isDown, changed = false)
                 } else {
                     it.value
                 }
@@ -77,16 +357,19 @@
         }
     }
 
+    /**
+     * Interface for mouse interactions
+     */
     object Mouse {
         enum class CursorMode {
             DISABLED, HIDDEN, NORMAL
         }
 
-        var position = Vector2fCopy.zero
-        var deltaPosition = Vector2fCopy.zero
+        var position: Vector2fc = Vector2fCopy.zero
+        var deltaPosition: Vector2fc = Vector2fCopy.zero
 
-        var left = ButtonState(isDown = false, changed = false)
-        var right = ButtonState(isDown = false, changed = false)
+        var left = ToggleableState(isDown = false, changed = false)
+        var right = ToggleableState(isDown = false, changed = false)
 
         fun setMode(mode: CursorMode) {
             val index = when (mode) {
@@ -106,104 +389,13 @@
             glfwGetCursorPos(Window.pointer, x.buffer, y.buffer)
 
             position = Vector2f(x.value.toFloat(), y.value.toFloat())
-            deltaPosition.sub(position).mul(-1f)
+            deltaPosition = position - deltaPosition
 
             val leftDown = glfwGetMouseButton(Window.pointer, GLFW_MOUSE_BUTTON_LEFT) != GLFW_RELEASE
             val rightDown = glfwGetMouseButton(Window.pointer, GLFW_MOUSE_BUTTON_RIGHT) != GLFW_RELEASE
 
-            left = ButtonState(isDown = leftDown, changed = leftDown != left.isDown)
-            right = ButtonState(isDown = rightDown, changed = rightDown != right.isDown)
-        }
-    }
-
-    object Controller {
-        enum class Button(val glfwKeyCode: Int) {
-            A(GLFW_GAMEPAD_BUTTON_A),
-            B(GLFW_GAMEPAD_BUTTON_B),
-            X(GLFW_GAMEPAD_BUTTON_X),
-            Y(GLFW_GAMEPAD_BUTTON_Y),
-            LB(GLFW_GAMEPAD_BUTTON_LEFT_BUMPER),
-            RB(GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER),
-            BACK(GLFW_GAMEPAD_BUTTON_BACK),
-            START(GLFW_GAMEPAD_BUTTON_START),
-
-            //LEFT_STICK_BUTTON(),
-            //RIGHT_STICK_BUTTON(),
-            D_PAD_UP(GLFW_GAMEPAD_BUTTON_DPAD_UP),
-            D_PAD_RIGHT(GLFW_GAMEPAD_BUTTON_DPAD_RIGHT),
-            D_PAD_DOWN(GLFW_GAMEPAD_BUTTON_DPAD_DOWN),
-            D_PAD_LEFT(GLFW_GAMEPAD_BUTTON_DPAD_LEFT)
-        }
-
-        var leftStick = Vector2fCopy.zero
-
-        var rightStick = Vector2fCopy.zero
-
-        // der button state, der allen buttons beim konstruieren gegeben wird
-        private val initialButtonState = ButtonState(isDown = false, changed = false)
-
-        // die button states der einzelnen buttons nach dem letzten update
-        private val buttonStates = enumValues<Button>()
-            .map { Pair(it, initialButtonState) }
-            .toMap().toMutableMap()
-
-
-        fun isDown(button: Button): Boolean {
-            return buttonStates.getValue(button).isDown
-        }
-
-        fun isUp(button: Button): Boolean {
-            return !isDown(button)
-        }
-
-        fun didButtonChange(button: Button): Boolean {
-            return buttonStates.getValue(button).changed
-        }
-
-        fun justDown(button: Button): Boolean = buttonStates.getValue(button).justDown
-
-        fun justUp(button: Button): Boolean = buttonStates.getValue(button).justUp
-
-        fun update() {
-            if (glfwJoystickPresent(GLFW_JOYSTICK_1) && glfwJoystickIsGamepad(GLFW_JOYSTICK_1)) {
-                val state = GLFWGamepadState.create()
-                glfwGetGamepadState(GLFW_JOYSTICK_1, state)
-
-                // Button Inputs
-                buttonStates.keys.forEach {
-                    val before = isDown(it)
-                    val now = state.buttons(it.glfwKeyCode).toInt() != GLFW_RELEASE
-
-                    buttonStates[it] = ButtonState(
-                        isDown = now,
-                        changed = before != now
-                    )
-                }
-
-                // Stick Inputs
-                leftStick = Vector2f(
-                    state.axes(GLFW_GAMEPAD_AXIS_LEFT_X),
-                    state.axes(GLFW_GAMEPAD_AXIS_LEFT_Y)
-                )
-
-                rightStick = Vector2f(
-                    state.axes(GLFW_GAMEPAD_AXIS_RIGHT_X),
-                    state.axes(GLFW_GAMEPAD_AXIS_RIGHT_Y)
-                )
-            } else {
-                // wenn kein Controller angeschlossen ist bzw. der Controller getrennt wurde,
-                // ist das so als würden wir null-input vom Controller erhalten, also
-                // keine Knöpfe gedrückt (changed wird entsprechend gesetzt), und die Joysticks bei (0, 0)
-                buttonStates.keys.forEach {
-                    buttonStates[it] = ButtonState(
-                        isDown = false,
-                        changed = buttonStates[it]!!.isDown != false
-                    )
-                }
-
-                leftStick = Vector2fCopy.zero
-                rightStick = Vector2fCopy.zero
-            }
+            left = ToggleableState(isDown = leftDown, changed = leftDown != left.isDown)
+            right = ToggleableState(isDown = rightDown, changed = rightDown != right.isDown)
         }
     }
 }
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/Loader.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Loader.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Loader.kt	(revision 50035aef68aa2cb204396d7ea4fef3140e4969c5)
@@ -2,9 +2,16 @@
 
 import engine.util.ICreateViaPath
 import java.io.File
+import kotlin.reflect.KClass
 import kotlin.reflect.full.companionObjectInstance
 
+/**
+ * Object for loading and caching assets via java resources
+ */
 object Loader {
+    /**
+     * Relative root directory path
+     */
     var root = ""
     val rootFolder: File
         get() {
@@ -14,6 +21,7 @@
             return rootFile
         }
 
+    @Deprecated("because its symbol is ugly", ReplaceWith("createViaPath<T>(path)"))
     inline fun <reified T> createViaPath(obj: ICreateViaPath<T>, path: String): T {
         val moddedPath = rootFolder.resolve(path)
         check(moddedPath.exists()) { "file not found ${moddedPath.path}" }
@@ -21,12 +29,31 @@
     }
 
     inline fun <reified T> createViaPath(path: String): T {
-        val moddedPath = rootFolder.resolve(path)
-        check(moddedPath.exists()) { "file not found ${moddedPath.path}" }
-        val obj = T::class.companionObjectInstance
-        check(obj != null) { "Class dose not define a companionObject" }
-        check(obj is ICreateViaPath<*>) { "companionObject dose not implement ICreateViaPath" }
-        @Suppress("UNCHECKED_CAST") val obj2 = obj as ICreateViaPath<T>
-        return obj2.createViaPath(moddedPath.path)
+        val moddedPath = getModdedPath(path)
+        return createResource(retreadICreateViaPath(T::class), moddedPath)
+    }
+
+    private fun convertPathToFile(path: String): File {
+        return rootFolder.resolve(path)
+    }
+
+    fun getModdedPath(path: String): String {
+        return convertPathToFile(path).also {
+            check(it.exists()) { "File not found ${it.path}" }
+        }.path
+    }
+
+    fun retreadICreateViaPath(klass: KClass<*>): ICreateViaPath<*> {
+        return klass.companionObjectInstance.let {
+            check(it != null) { "Class does not define a companionObject" }
+            check(it is ICreateViaPath<*>) { "Companion object does not implement `ICreateViaPath`" }
+            it
+        }
+    }
+
+    inline fun <reified T>createResource(factory: ICreateViaPath<*>, path: String): T {
+        val result = factory.createViaPath(path)
+        check(result is T) { "Generic type in companion object does not match the class type" }
+        return result
     }
 }
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/Physics.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Physics.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Physics.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -10,7 +10,6 @@
     var velocityIterations = 6
     var positionIterations = 2
 
-    //we be fly so no need gravity
     val world = World(Vec2(0f, 0f))
 
     fun update() {
Index: src/main/kotlin/jackTheFishman/engine/Time.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Time.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Time.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,12 +1,23 @@
 package engine
 
+/**
+ * Object that directly controls global time
+ */
 object Time {
+    /**
+     * The amount of time since that creation of time (aka game start)
+     */
     var time = 0f
+
+    /**
+     * The amount of time that has passed since the last time update
+     */
     var deltaTime = 0f
 
     var timeScale = 1f
 
     fun update(deltaTime: Float) {
+        check(deltaTime >= 0f) { "Time can not flow in reverse" }
         this.deltaTime = deltaTime
         time += deltaTime * timeScale
     }
Index: src/main/kotlin/jackTheFishman/engine/Window.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/Window.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/Window.kt	(revision 50035aef68aa2cb204396d7ea4fef3140e4969c5)
@@ -10,15 +10,21 @@
 import org.lwjgl.opengl.GL46.GL_DEPTH_TEST
 import org.lwjgl.opengl.GL46.glEnable
 import java.io.Closeable
+import kotlin.math.min
 
 
+/**
+ * Window Wrapper that also manages the open gl context
+ */
 object Window : Closeable {
+    private const val MAX_DELTA_TIME = .1f // translates to 10fps
     private const val title = "Jack the Fishman Framework"
 
     var size: Vector2ic = Vector2i(680, 460)
 
-    val shouldClose
+    var shouldClose
         get() = glfwWindowShouldClose(pointer)
+        set(value) = glfwSetWindowShouldClose(pointer, value)
 
     val aspect: Float
         get() = size.x().toFloat() / size.y().toFloat()
@@ -30,17 +36,29 @@
     private var lastTime = 0.0
 
     init {
+        open()
         config()
+    }
+
+    private fun config() {
+        configGLFW()
+        configEvents()
+        configOpenGL()
+    }
+
+    private fun open() {
         glfwMakeContextCurrent(pointer)
         createCapabilities()
+        glfwShowWindow(pointer)
+    }
+
+    private fun configOpenGL() {
         glEnable(GL_DEPTH_TEST)
-        glfwShowWindow(pointer)
     }
 
-    private fun config() {
+    private fun configGLFW() {
         glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE) // the window will stay hidden after creation
         glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE) // the window will be resizable
-        configEvents()
         glfwSwapInterval(1)
     }
 
@@ -58,6 +76,10 @@
             onResize(this)
         }
 
+        glfwSetWindowCloseCallback(pointer) { _ ->
+            glfwDestroyWindow(pointer)
+            glfwTerminate()
+        }
     }
 
     fun setIcon(texture: Texture2D) {
@@ -67,15 +89,27 @@
     }
 
     fun update() {
-        val time = glfwGetTime()
+        updateWindow()
+        updateTime()
+    }
+
+    private fun updateWindow() {
         glfwSwapBuffers(pointer)
         glfwPollEvents()
-        Time.update((time - lastTime).toFloat())
-        lastTime = time
+    }
+
+    private fun updateTime() {
+        glfwGetTime().also {time ->
+            // when the window should close the time jumps to 0
+            if (time > 0.0) {
+                val deltaTime = (time - lastTime).toFloat()
+                Time.update(min(deltaTime, MAX_DELTA_TIME))
+                lastTime = time
+            }
+        }
     }
 
     override fun close() {
-        glfwDestroyWindow(pointer)
-        glfwTerminate()
+        shouldClose = true
     }
 }
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/graphics/ImageFile.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/graphics/ImageFile.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/graphics/ImageFile.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -2,10 +2,15 @@
 
 import engine.util.IntPointer
 import org.joml.Vector2i
+import org.joml.Vector2ic
 import org.lwjgl.stb.STBImage
 import org.lwjgl.stb.STBImage.stbi_set_flip_vertically_on_load
 import java.io.Closeable
 
+/**
+ * Represents a image file as buffer object.
+ * Primary for loading `jpeg` and `png` image files.
+ */
 class ImageFile(path: String) : Closeable {
     private val width = IntPointer()
     private val height = IntPointer()
@@ -23,7 +28,7 @@
 
     val data = possiblyData!!
 
-    val size = Vector2i(width.value, height.value)
+    val size: Vector2ic = Vector2i(width.value, height.value)
 
     override fun close() {
         STBImage.stbi_image_free(data)
Index: src/main/kotlin/jackTheFishman/engine/math/MatrixExtensions.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/MatrixExtensions.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/math/Matrix4fExtensions.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -1,27 +1,2 @@
 package engine.math
 
-import engine.util.IJsonUnserializable
-import org.joml.Matrix4f
-
-object Matrix4fExt : IJsonUnserializable<Matrix4f> {
-    override fun fromJson(json: Any?): Matrix4f {
-        val array = json as List<*>
-
-        val result = Matrix4f()
-        (0..15).forEach {
-            result[it % 4, it / 4] = (array[it] as Double).toFloat()
-        }
-
-        return result
-    }
-}
-
-fun Matrix4f.toJson(): Any? {
-    return arrayOf(
-        this[0, 0], this[1, 0], this[2, 0], this[3, 0],
-        this[0, 1], this[1, 1], this[2, 1], this[3, 1],
-        this[0, 2], this[1, 2], this[2, 2], this[3, 2],
-        this[0, 3], this[1, 3], this[2, 3], this[3, 3]
-    )
-}
-
Index: src/main/kotlin/jackTheFishman/engine/math/Vector2fConst.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/Vector2fConst.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/math/Vector2fConst.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -7,9 +7,6 @@
     val zero: Vector2fc = Vector2f(0f, 0f)
     val one: Vector2fc = Vector2f(1f, 1f)
 
-    // Da gibts glaube kein gutes Äquivalent bei Vector2f
-    // val forward: Vector3fc = Vector3f(0f, 0f, -1f)
-    // val backwards: Vector3fc = Vector3f(0f, 0f, 1f)
     val right: Vector2fc = Vector2f(1f, 0f)
     val left: Vector2fc = Vector2f(-1f, 0f)
     val up: Vector2fc = Vector2f(0f, 1f)
Index: src/main/kotlin/jackTheFishman/engine/math/Vector2fcExtensions.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/Vector2fcExtensions.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/math/Vector2fcExtensions.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -25,6 +25,10 @@
     return Vector2f(this).add(other)
 }
 
+operator fun Vector2fc.minus(other: Vector2fc): Vector2fc {
+    return Vector2f(this).sub(other)
+}
+
 operator fun Vector2fc.unaryMinus(): Vector2fc {
     return Vector2f(this).negate()
 }
Index: src/main/kotlin/jackTheFishman/engine/util/ICreateViaPath.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/util/ICreateViaPath.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/util/ICreateViaPath.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,5 +1,9 @@
 package engine.util
 
+/**
+ * Represents a object that can be constructed with a resource that's represented with a path
+ * @param T is the type of the factory result
+ */
 interface ICreateViaPath<T> {
     fun createViaPath(path: String): T
 }
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/util/IFinalized.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/util/IFinalized.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/util/IFinalized.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,9 +1,12 @@
 package engine.util
 
-/** @author Janek Winkler
- ** Interface for closing sources before program exit.
- **/
+/**
+ * Interface for closing sources before program exit
+ */
 interface IFinalized {
+    /**
+     * Event that will be called when this source is about to be closed
+     */
     fun finalize()
 
     companion object {
Index: src/main/kotlin/jackTheFishman/engine/util/IUsable.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/util/IUsable.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/util/IUsable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,5 +1,8 @@
 package engine.util
 
+/**
+ * This interface is a abstract representation of a bindable or usable object
+ */
 interface IUsable {
     fun use(callback: () -> Unit)
 }
\ No newline at end of file
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/DD3.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/DD3.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/DD3.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -2,8 +2,12 @@
 import engine.*
 import engine.graphics.Mesh
 import engine.graphics.Texture2D
-import engine.math.*
+import engine.math.Vector3fConst
+import engine.math.normalized
+import engine.math.plus
+import engine.math.times
 import org.joml.Vector3f
+import org.joml.Vector3fc
 import org.lwjgl.glfw.GLFW.*
 import org.lwjgl.opengl.GL11
 import org.lwjgl.opengl.GL11.glCullFace
@@ -40,7 +44,7 @@
 
     init {
         // set default texture color to white
-        Texture2D.setDefaultTextureWhite()
+        Texture2D.setDefaultTexture2DWhite()
 
         glCullFace(GL_BACK)
         glEnable(GL_CULL_FACE)
@@ -134,14 +138,14 @@
             GLFW_KEY_LEFT_CONTROL to Vector3fConst.down
         )
 
-        val move = Vector3fCopy.zero
+        var move: Vector3fc = Vector3fConst.zero
         for ((key, direction) in keyToDirection) {
             if (Input.Keyboard.down(key)) {
                 move += Vector3f(direction)
             }
         }
         if (move.lengthSquared() > 0) {
-            move.normalize()
+            move = move.normalized()
         }
         Camera.main!!.transform.position = Camera.main!!.transform.position + move * speed
 
Index: src/main/kotlin/jackTheFishman/engine/audio/IPlayable.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/audio/IPlayable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/audio/IPlayable.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -1,5 +1,8 @@
 package engine.audio
 
+/**
+ * Represents a resource that can be played
+ */
 interface IPlayable {
     fun play() // starts play head
     fun pause() // only pauses progress
Index: src/main/kotlin/jackTheFishman/engine/audio/Sample.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/audio/Sample.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/audio/Sample.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -16,13 +16,13 @@
     // Find the correct OpenAL format
     private val format = formats[sampleFile.channelCount]
 
-    //Request space for the buffer
+    // Request space for the buffer
     @Json(ignored = true)
     val pointer = alGenBuffers()
 
     init {
         check(format != null) { "format not found" }
-        //Send the data to OpenAL
+        // Send the data to OpenAL
         alBufferData(pointer, format, sampleFile.data, sampleFile.sampleRate)
     }
 
@@ -43,14 +43,14 @@
             check(rawAudioBuffer != null) {
                 val error = IntPointer()
                 STBVorbis.stb_vorbis_open_filename(path, error.buffer, null)
-                "audio file could not be loaded at \"$path\". error Nr. ${error.value}"
+                "Audio file could not be loaded at \"$path\". Error Nr. ${error.value}"
             }
 
             // Retrieve the extra information that was stored in the buffers by the function
             val channels = channelsBuffer.get()
             val sampleRate = sampleRateBuffer.get()
 
-            //Free the space we allocated earlier
+            // Free the space we allocated earlier
             MemoryStack.stackPop()
             MemoryStack.stackPop()
             return SampleFile(rawAudioBuffer, channels, sampleRate)
Index: src/main/kotlin/jackTheFishman/engine/audio/Source.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/audio/Source.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/audio/Source.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -1,11 +1,14 @@
 package engine.audio
 
-import engine.math.Vector3fCopy
-import org.joml.Vector3f
+import engine.math.Vector3fConst
+import org.joml.Vector3fc
 import org.lwjgl.openal.AL10.*
 import org.lwjgl.openal.AL11.AL_SEC_OFFSET
 import java.io.Closeable
 
+/**
+ * Represents a audio sample like a sound
+ */
 class Source(initialSample: Sample? = null) : Closeable, IPlayable {
     private val pointer = alGenSources()
     var sample: Sample? = null
@@ -32,15 +35,15 @@
             field = value
         }
 
-    var position: Vector3f = Vector3fCopy.zero
+    var position: Vector3fc = Vector3fConst.zero
         set(value) {
-            alSource3f(pointer, AL_POSITION, value.x, value.y, value.z)
+            alSource3f(pointer, AL_POSITION, value.x(), value.y(), value.z())
             field = value
         }
 
-    var velocity: Vector3f = Vector3fCopy.zero
+    var velocity: Vector3fc = Vector3fConst.zero
         set(value) {
-            alSource3f(pointer, AL_VELOCITY, value.x, value.y, value.z)
+            alSource3f(pointer, AL_VELOCITY, value.x(), value.y(), value.z())
             field = value
         }
 
Index: src/main/kotlin/jackTheFishman/engine/graphics/Mesh.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/graphics/Mesh.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/graphics/Mesh.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -26,7 +26,7 @@
 
     init {
         glBindBuffer(GL_ARRAY_BUFFER, vbo)
-        val buffer = data.flatMap { vertex -> vertex.toBuffer() }.toFloatArray()
+        val buffer = data.flatMap { vertex -> vertex.asList() }.toFloatArray()
         glBufferData(GL_ARRAY_BUFFER, buffer, GL_STATIC_DRAW)
 
         glBindVertexArray(vao)
Index: src/main/kotlin/jackTheFishman/engine/graphics/Texture2D.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/graphics/Texture2D.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/graphics/Texture2D.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -105,8 +105,8 @@
     }
 
     /**
-     * Binds and unbinds the texture
-     * This wraps the callback in a bound state
+     * Binds and unbinds the texture.
+     * This wraps the callback in a bound state.
      */
     override fun use(callback: () -> Unit) {
         bindWithIndex(0)
@@ -119,7 +119,7 @@
             return Texture2DViaPath(path)
         }
 
-        fun setDefaultTextureWhite() {
+        fun setDefaultTexture2DWhite() {
             GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0)
             glTexImage2D(
                 GL_TEXTURE_2D,
Index: src/main/kotlin/jackTheFishman/engine/graphics/Vertex.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/graphics/Vertex.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/graphics/Vertex.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -2,14 +2,13 @@
 
 import org.joml.Vector2fc
 import org.joml.Vector3fc
-import org.lwjgl.opengl.GL46
-import org.lwjgl.opengl.GL46.GL_FLOAT
+import org.lwjgl.opengl.GL46.*
 
 data class Vertex(val position: Vector3fc, val uv: Vector2fc, val normal: Vector3fc, val tangent: Vector3fc) {
 
     data class Attribute(val name: String, val size: Int, val type: Int)
 
-    fun toBuffer(): List<Float> {
+    fun asList(): List<Float> {
         return listOf(
             position.x(),
             position.y(),
@@ -38,16 +37,20 @@
             var stride = 0
             for (attribute in attributes.withIndex()) {
                 with(attribute.index) {
-                    GL46.glVertexAttribPointer(
-                        this, attribute.value.size, attribute.value.type,
-                        false, size(), stride.toLong()
-                    )
-                    GL46.glEnableVertexAttribArray(this)
+                    createVertexAttribute(this, attribute.value, stride.toLong())
                     stride += attribute.value.size * floatSize // only upload floats
                 }
             }
         }
 
+        private fun createVertexAttribute(index: Int, attribute: Attribute, stride: Long) {
+            glVertexAttribPointer(
+                index, attribute.size, attribute.type,
+                false, size(), stride
+            )
+            glEnableVertexAttribArray(index)
+        }
+
         fun namedIndex(): Array<String> {
             return attributes.map { attribute -> attribute.name }.toTypedArray()
         }
Index: src/main/kotlin/jackTheFishman/engine/math/QuaternionExtensions.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/QuaternionExtensions.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/engine/math/QuaternionExtensions.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -1,22 +1,2 @@
 package engine.math
 
-import engine.util.IJsonUnserializable
-import org.joml.Quaternionf
-
-object QuaternionfExt : IJsonUnserializable<Quaternionf> {
-    override fun fromJson(json: Any?): Quaternionf {
-        val list = json as List<*>
-
-        return Quaternionf(
-            (list[0] as Double).toFloat(),
-            (list[1] as Double).toFloat(),
-            (list[2] as Double).toFloat(),
-            (list[3] as Double).toFloat()
-        )
-    }
-}
-
-fun Quaternionf.toJson(): Any? {
-    return arrayOf(this.x, this.y, this.z, this.w)
-}
-
Index: src/main/kotlin/jackTheFishman/engine/math/Vector3fExtensions.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/Vector3fExtensions.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/engine/math/Vector3fExtensions.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -1,6 +1,5 @@
 package engine.math
 
-import engine.util.IJsonUnserializable
 import org.joml.Vector3f
 import org.joml.Vector3fc
 
@@ -43,20 +42,3 @@
 operator fun Vector3f.unaryMinus(): Vector3fc {
     return Vector3f(this).mul(-1f)
 }
-
-fun Vector3f.toJson(): Any? {
-    return arrayOf(
-        this.x, this.y, this.z
-    )
-}
-
-object Vector3fExt : IJsonUnserializable<Vector3f> {
-    override fun fromJson(json: Any?): Vector3f {
-        val list = json as List<*>
-        return Vector3f(
-            (list[0] as Double).toFloat(),
-            (list[1] as Double).toFloat(),
-            (list[2] as Double).toFloat()
-        )
-    }
-}
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/math/Vector3fcExtensions.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/Vector3fcExtensions.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/engine/math/Vector3fcExtensions.kt	(revision 50035aef68aa2cb204396d7ea4fef3140e4969c5)
@@ -13,6 +13,13 @@
     return result
 }
 
+fun Vector3fc.normalized(): Vector3fc {
+    if (this.lengthSquared() > 0) {
+        return Vector3f(this).normalize()
+    }
+    return this
+}
+
 operator fun Vector3fc.times(other: Vector3fc): Vector3fc {
     return Vector3f(this).mul(other)
 }
@@ -32,7 +39,3 @@
 operator fun Vector3fc.unaryMinus(): Vector3fc {
     return Vector3f(this).negate()
 }
-
-fun Vector3fc.toJson(): Any? {
-    return arrayOf(this.x(), this.y(), this.z())
-}
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/examples/fly.kt
===================================================================
--- src/main/kotlin/jackTheFishman/examples/fly.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/examples/ExampleFly.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -6,20 +6,19 @@
 import engine.graphics.Shader
 import engine.graphics.Texture2D
 import engine.math.Vector3fConst
-import engine.math.Vector3fCopy
 import engine.math.clamp
-import org.joml.Matrix4f
-import org.joml.Quaternionf
-import org.joml.Vector3f
-import org.joml.Vector4f
+import engine.math.plus
+import engine.math.times
+import org.joml.*
 import org.lwjgl.glfw.GLFW
 import org.lwjgl.opengl.GL46
+import java.lang.Math
 
 fun main() {
-    Game2().run()
+    ExampleFly().run()
 }
 
-class Game2 : Game() {
+class ExampleFly : Game() {
     init {
         Loader.root = "assets/examples"
     }
@@ -34,8 +33,8 @@
     private val projection = Matrix4f()
     private val view = Matrix4f()
 
-    private val position = Vector3f()
-    private val rotation = Quaternionf()
+    private var position: Vector3fc = Vector3f()
+    private var rotation = Quaternionf()
 
     init {
         Window.onResize = {
@@ -52,7 +51,7 @@
         GL46.glClear(GL46.GL_COLOR_BUFFER_BIT or GL46.GL_DEPTH_BUFFER_BIT)
 
 
-        val move = Vector3fCopy.zero
+        var move: Vector3fc = Vector3fConst.zero
         val speed = 6f
 
         if (Input.Mouse.left.justDown) {
@@ -60,32 +59,34 @@
         }
 
         if (Input.Keyboard.down(GLFW.GLFW_KEY_W)) {
-            move.add(Vector3fConst.forward)
+            move += Vector3fConst.forward
         }
         if (Input.Keyboard.down(GLFW.GLFW_KEY_S)) {
-            move.add(Vector3fConst.backwards)
+            move += Vector3fConst.backwards
         }
         if (Input.Keyboard.down(GLFW.GLFW_KEY_SPACE)) {
-            move.add(Vector3fConst.up)
+            move += Vector3fConst.up
         }
         if (Input.Keyboard.down(GLFW.GLFW_KEY_LEFT_SHIFT)) {
-            move.add(Vector3fConst.down)
+            move += Vector3fConst.down
         }
         if (Input.Keyboard.down(GLFW.GLFW_KEY_A)) {
-            move.add(Vector3fConst.left)
+            move += Vector3fConst.left
         }
         if (Input.Keyboard.down(GLFW.GLFW_KEY_D)) {
-            move.add(Vector3fConst.right)
+            move += Vector3fConst.right
         }
 
         val sensitivity = .006f
-        rotation.rotateAxis(Input.Mouse.deltaPosition.x * sensitivity, Vector3fConst.up)
-        rotation.rotateLocalX(Input.Mouse.deltaPosition.y * sensitivity)
+        rotation.rotateAxis(Input.Mouse.deltaPosition.x() * sensitivity, Vector3fConst.up)
+        rotation.rotateLocalX(Input.Mouse.deltaPosition.y() * sensitivity)
 
         move.clamp(1f)
-        move.mul(Time.deltaTime * speed)
-        rotation.transformInverse(move)
-        position.add(move)
+        move *= Time.deltaTime * speed
+        move = with(Vector3f(move)) {
+            rotation.transformInverse(this)
+        }
+        position += move
 
         view.identity()
         view.rotation(rotation)
Index: src/main/kotlin/jackTheFishman/examples/ineraction.kt
===================================================================
--- src/main/kotlin/jackTheFishman/examples/ineraction.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/examples/ExampleIneraction.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -13,10 +13,10 @@
 import kotlin.math.sin
 
 fun main() {
-    Game1().run()
+    ExampleInteraction().run()
 }
 
-class Game1 : Game() {
+class ExampleInteraction : Game() {
     init {
         Loader.root = "assets/examples"
     }
Index: src/main/kotlin/jackTheFishman/examples/ExampleShaderDemo.kt
===================================================================
--- src/main/kotlin/jackTheFishman/examples/ExampleShaderDemo.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ src/main/kotlin/jackTheFishman/examples/ExampleShaderDemo.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
@@ -0,0 +1,73 @@
+package examples
+
+import engine.Game
+import engine.Loader
+import engine.Time
+import engine.Window
+import engine.graphics.Mesh
+import engine.graphics.Shader
+import engine.graphics.Texture2D
+import org.joml.Matrix4f
+import org.joml.Quaternionf
+import org.joml.Vector3f
+import org.lwjgl.opengl.GL46
+
+/**
+ * possible shader names:
+ * white,
+ * striped,
+ * wobble,
+ * texture,
+ * demo
+ */
+const val shaderName = "demo"
+
+fun main() {
+    ExampleShaderDemo().run()
+}
+
+class ExampleShaderDemo : Game() {
+    init {
+        Loader.root = "assets/examples"
+    }
+
+    private val loadedMesh = Loader.createViaPath(Mesh, "models/scene.fbx")
+    private val tex = Loader.createViaPath(Texture2D, "textures/krakula-xl.png")
+    private val shader: Shader = Loader.createViaPath(Shader, "shaders/demo/$shaderName.shader")
+    private val logo = Texture2D.createViaPath("assets/engine/logo.png")
+
+    private val world = Matrix4f()
+    private val projection = Matrix4f()
+    private val view = Matrix4f()
+
+    init {
+        Window.onResize = {
+            projection.identity()
+            projection.perspective(Math.toRadians(80.0).toFloat(), it.aspect, .1f, 10f)
+        }
+        Window.onResize(Window)
+        Window.setIcon(logo)
+
+        world.translate(0f, 0f, -3f)
+    }
+
+
+    override fun draw() {
+        GL46.glClearColor(.2f, .2f, .2f, 1f)
+        GL46.glClear(GL46.GL_COLOR_BUFFER_BIT or GL46.GL_DEPTH_BUFFER_BIT)
+
+        view.identity()
+        view.rotation(Quaternionf())
+        view.translate(Vector3f())
+
+        shader.setMatrix(world, view, projection)
+        shader.setUniform("Time", Time.time)
+        shader.setUniform("Texture", tex)
+
+        shader.use {
+            loadedMesh.draw()
+        }
+
+        super.draw()
+    }
+}
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/AudioComponent.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/AudioComponent.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/AudioComponent.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -1,7 +1,7 @@
+
 import engine.audio.IPlayable
 import engine.audio.Sample
 import engine.audio.Source
-import engine.math.Vector3fCopy
 
 class AudioComponent : Component(), IPlayable {
     private var source = Source()
@@ -28,10 +28,8 @@
     override val playing: Boolean get() = source.playing
 
     override fun update() {
-        /// An dieser Stelle wäre es falsch, `transform.position` zu benutzen, da das
-        /// nur die Translation eines einzelnen Transform Components wäre.
-        /// Wir wollen aber die Translation aller Transform Componenten zusammengefasst haben.
-        source.position = transform.generateMatrix().getTranslation(Vector3fCopy.zero)
+        // TODO make `transform.position` also be effected by parent transformation
+        source.position = transform.position
     }
 
     override fun draw() {}
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/AudioListener.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/AudioListener.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/AudioListener.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -2,13 +2,11 @@
 
 import Component
 import engine.Audio
-import engine.math.Vector3fCopy
-import org.joml.Quaternionf
 
 class AudioListener : Component() {
     override fun update() {
-        Audio.Listener.position = transform.generateMatrix().getTranslation(Vector3fCopy.zero)
-        Audio.Listener.rotation = transform.generateMatrix().getNormalizedRotation(Quaternionf())
+        Audio.Listener.position = transform.position
+        Audio.Listener.rotation = transform.rotation
     }
 
     override fun draw() {}
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Camera.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Camera.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Camera.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -2,7 +2,7 @@
 
 import Component
 import engine.Window
-import engine.math.Vector3fCopy
+import engine.math.Vector3fConst
 import engine.math.minus
 import engine.math.plus
 import engine.math.times
@@ -50,7 +50,7 @@
             val pointToFollow = follow!!.position + relativeRotation.normalize(1F) * distance
             transform.position = Vector3f(transform.position).lerp(pointToFollow, smoothAmount)
             transform.rotation =
-                (Quaternionf().identity().lookAlong((follow!!.position - transform.position), Vector3fCopy.up))
+                (Quaternionf().identity().lookAlong((follow!!.position - transform.position), Vector3fConst.up))
         }
     }
 
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Collider.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Collider.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Collider.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -6,6 +6,9 @@
 import org.joml.Vector2fc
 import org.joml.Vector3f
 
+/**
+ * Represents a physical object with collision
+ */
 abstract class Collider : Component() {
     protected abstract val fixture: Fixture
     abstract var velocity: Vector2fc
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/ModelRenderer.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/ModelRenderer.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/ModelRenderer.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -7,14 +7,10 @@
 import graphics.Material
 import org.joml.Vector3f
 
+/**
+ * Component that renders a mesh with a specific material
+ */
 data class ModelRenderer(var mesh: Mesh? = null, var material: Material = defaultMaterial) : Renderer() {
-    companion object {
-        val defaultShader = Loader.createViaPath<Shader>("shaders/default.shader")
-        val defaultNormal = Loader.createViaPath<Texture2D>("textures/normal.png")
-        val defaultAlbedo = Loader.createViaPath<Texture2D>("textures/default.png")
-        val defaultMaterial = Material(defaultShader, .5f, 40f, .6f, Vector3f(.1f, .1f, .1f), null, null, .1f)
-    }
-
     override fun update() {}
 
     override fun draw() {
@@ -25,33 +21,55 @@
                 Camera.main!!.generateViewMatrix(),
                 Camera.main!!.getProjectionMatrix()
             )
-            for ((index, light) in PointLight.all.withIndex()) {
-                shader.setUniform("LightPositions[$index]", light.transform.position)
-                shader.setUniform("LightColors[$index]", Vector3f(light.color))
-            }
-            shader.setUniform("CameraPosition", Camera.main!!.transform.position)
-            shader.setUniform("SpecularIntensity", material.specularIntensity)
-            shader.setUniform("SpecularRoughness", material.specularRoughness)
-            shader.setUniform("FresnelIntensity", material.fresnelIntensity)
-            shader.setUniform("AmbientColor", material.ambientColor)
+            uploadUniforms(shader)
+            shader.use {
+                mesh?.draw()
+            }
+        }
+    }
+
+    private fun uploadUniforms(shader: Shader) {
+        uploadLightUniforms(shader)
+        uploadMaterialUniforms(shader)
+        uploadFogUniforms(shader)
+    }
+
+    private fun uploadLightUniforms(shader: Shader) {
+        for ((index, light) in PointLight.all.withIndex()) {
+            shader.setUniform("LightPositions[$index]", light.transform.position)
+            shader.setUniform("LightColors[$index]", Vector3f(light.color))
+        }
+    }
+
+    private fun uploadMaterialUniforms(shader: Shader) {
+        shader.setUniform("CameraPosition", Camera.main!!.transform.position)
+        shader.setUniform("SpecularIntensity", material.specularIntensity)
+        shader.setUniform("SpecularRoughness", material.specularRoughness)
+        shader.setUniform("FresnelIntensity", material.fresnelIntensity)
+        shader.setUniform("AmbientColor", material.ambientColor)
 
-            if (material.albedoTexture != null) {
-                shader.setUniform("AlbedoTexture", material.albedoTexture!!)
-            } else {
-                shader.setUniform("AlbedoTexture", defaultAlbedo) // default aka white
-            }
-            if (material.normalTexture != null) {
-                shader.setUniform("NormalTexture", material.normalTexture!!)
-            } else {
-                shader.setUniform("NormalTexture", defaultNormal)
-            }
-            shader.setUniform("NormalIntensity", material.normalIntensity)
+        if (material.albedoTexture != null) {
+            shader.setUniform("AlbedoTexture", material.albedoTexture!!)
+        } else {
+            shader.setUniform("AlbedoTexture", defaultAlbedo) // default aka white
+        }
+        if (material.normalTexture != null) {
+            shader.setUniform("NormalTexture", material.normalTexture!!)
+        } else {
+            shader.setUniform("NormalTexture", defaultNormal)
+        }
+        shader.setUniform("NormalIntensity", material.normalIntensity)
+    }
 
-            shader.setUniform("FogDistance", 10f)
-            shader.setUniform("FogColor", Vector3f(.1f, .1f, .15f))
-            shader.use {
-                mesh?.draw()
-            }
-        }
+    private fun uploadFogUniforms(shader: Shader) {
+        shader.setUniform("FogDistance", 10f)
+        shader.setUniform("FogColor", Vector3f(.1f, .1f, .15f))
+    }
+
+    companion object {
+        private val defaultShader = Loader.createViaPath<Shader>("shaders/default.shader")
+        private val defaultNormal = Loader.createViaPath<Texture2D>("textures/normal.png")
+        private val defaultAlbedo = Loader.createViaPath<Texture2D>("textures/default.png")
+        private val defaultMaterial = Material(defaultShader, .5f, 40f, .6f, Vector3f(.1f, .1f, .1f), null, null, .1f)
     }
 }
\ No newline at end of file
Index: DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Music.kt
===================================================================
--- DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Music.kt	(revision e2237f250af72f50b01562d1f445a7387ac7047a)
+++ DodgyDeliveries3/src/main/kotlin/dodgyDeliveries3/components/Music.kt	(revision 302b1a9070d9c382cb3c86019e130d4233a13f3e)
@@ -6,7 +6,6 @@
 import engine.audio.Source
 
 class Music : Component(), IPlayable {
-
     var sample: Sample? = null
         get() = source.sample
         set(value) {
Index: src/main/kotlin/jackTheFishman/engine/math/Vector3fCopy.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/math/Vector3fCopy.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
+++ src/main/kotlin/jackTheFishman/engine/math/Vector3fCopy.kt	(revision 76dcd7104bf8c8dc2a340e1ab121f7ca313c642e)
@@ -1,15 +0,0 @@
-package engine.math
-
-import org.joml.Vector3f
-
-object Vector3fCopy {
-    val zero: Vector3f get() = Vector3f(0f, 0f, 0f)
-    val one: Vector3f get() = Vector3f(1f, 1f, 1f)
-
-    val forward: Vector3f get() = Vector3f(0f, 0f, -1f)
-    val backwards: Vector3f get() = Vector3f(0f, 0f, 1f)
-    val right: Vector3f get() = Vector3f(1f, 0f, 0f)
-    val left: Vector3f get() = Vector3f(-1f, 0f, 0f)
-    val up: Vector3f get() = Vector3f(0f, 1f, 0f)
-    val down: Vector3f get() = Vector3f(0f, -1f, 0f)
-}
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/util/IJsonSerializable.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/util/IJsonSerializable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/util/IJsonSerializable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,5 +0,0 @@
-package engine.util
-
-interface IJsonSerializable {
-    fun toJson(): Any?
-}
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/engine/util/IJsonUnserializable.kt
===================================================================
--- src/main/kotlin/jackTheFishman/engine/util/IJsonUnserializable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
+++ src/main/kotlin/jackTheFishman/engine/util/IJsonUnserializable.kt	(revision 10bc5a3b36008c23dfde03ff3421992f35d31605)
@@ -1,5 +0,0 @@
-package engine.util
-
-interface IJsonUnserializable<T> {
-    fun fromJson(json: Any?): T
-}
\ No newline at end of file
Index: src/main/kotlin/jackTheFishman/examples/shaderDemo.kt
===================================================================
--- src/main/kotlin/jackTheFishman/examples/shaderDemo.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
+++ src/main/kotlin/jackTheFishman/examples/shaderDemo.kt	(revision 71c7a7194043a7811d48f5c6b0fad12f4e61f04d)
@@ -1,114 +0,0 @@
-package examples
-
-import engine.*
-import engine.graphics.Mesh
-import engine.graphics.Shader
-import engine.graphics.Texture2D
-import engine.math.Vector3fConst
-import engine.math.Vector3fCopy
-import engine.math.clamp
-import org.joml.Matrix4f
-import org.joml.Quaternionf
-import org.joml.Vector3f
-import org.lwjgl.glfw.GLFW
-import org.lwjgl.opengl.GL46
-
-const val shaderName = "demo"
-
-// possible shader names
-// white
-// striped
-// wobble
-// texture
-
-// demo
-
-
-fun main() {
-    Game3().run()
-}
-
-class Game3 : Game() {
-    init {
-        Loader.root = "assets/examples"
-    }
-
-    private val loadedMesh = Loader.createViaPath(Mesh, "models/scene.fbx")
-    private val tex = Loader.createViaPath(Texture2D, "textures/krakula-xl.png")
-    private val shader: Shader = Loader.createViaPath(Shader, "shaders/demo/$shaderName.shader")
-    private val logo = Texture2D.createViaPath("assets/engine/logo.png")
-
-    private val world = Matrix4f()
-    private val projection = Matrix4f()
-    private val view = Matrix4f()
-
-    private val position = Vector3f()
-    private val rotation = Quaternionf()
-
-    init {
-        Window.onResize = {
-            projection.identity()
-            projection.perspective(Math.toRadians(80.0).toFloat(), it.aspect, .1f, 10f)
-        }
-        Window.onResize(Window)
-        Window.setIcon(logo)
-
-        world.translate(0f, 0f, -3f)
-    }
-
-
-    override fun draw() {
-        GL46.glClearColor(.2f, .2f, .2f, 1f)
-        GL46.glClear(GL46.GL_COLOR_BUFFER_BIT or GL46.GL_DEPTH_BUFFER_BIT)
-
-
-        val move = Vector3fCopy.zero
-        val speed = 6f
-
-        if (Input.Mouse.left.justDown) {
-            Input.Mouse.setMode(Input.Mouse.CursorMode.DISABLED)
-        }
-
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_W)) {
-            move.add(Vector3fConst.forward)
-        }
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_S)) {
-            move.add(Vector3fConst.backwards)
-        }
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_SPACE)) {
-            move.add(Vector3fConst.up)
-        }
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_LEFT_SHIFT)) {
-            move.add(Vector3fConst.down)
-        }
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_A)) {
-            move.add(Vector3fConst.left)
-        }
-        if (Input.Keyboard.down(GLFW.GLFW_KEY_D)) {
-            move.add(Vector3fConst.right)
-        }
-
-        val sensitivity = .006f
-        rotation.rotateAxis(Input.Mouse.deltaPosition.x * sensitivity, Vector3fConst.up)
-        rotation.rotateLocalX(Input.Mouse.deltaPosition.y * sensitivity)
-
-        move.clamp(1f)
-        move.mul(Time.deltaTime * speed)
-        rotation.transformInverse(move)
-        position.add(move)
-
-        view.identity()
-        view.rotation(rotation)
-        view.translate(position)
-
-        shader.setMatrix(world, view, projection)
-        shader.setUniform("Time", Time.time)
-        shader.setUniform("Texture", tex)
-
-        shader.use {
-            loadedMesh.draw()
-        }
-
-        super.draw()
-    }
-}
diff --git src/main/kotlin/jackTheFishman/examples/serialisation.kt src/main/kotlin/jackTheFishman/examples/ExampleSerialisation.kt
rename from src/main/kotlin/jackTheFishman/examples/serialisation.kt
rename to src/main/kotlin/jackTheFishman/examples/ExampleSerialisation.kt
